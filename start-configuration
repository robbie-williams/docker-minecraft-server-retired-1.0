#!/bin/bash

. ${SCRIPTS:-/}start-utils

shopt -s nullglob

#umask 002
export HOME=/data

if [ ! -e /data/eula.txt ]; then
  if ! isTrue "$EULA"; then
    log ""
    log "Please accept the Minecraft EULA at"
    log "  https://account.mojang.com/documents/minecraft_eula"
    log "by adding the following immediately after 'docker run':"
    log "  -e EULA=TRUE"
    log ""
    exit 1
  fi

  writeEula
fi


log "Running as uid=$(id -u) gid=$(id -g) with /data as '$(ls -lnd /data)'"

if ! touch /data/.verify_access; then
  log "ERROR: /data doesn't seem to be writable. Please make sure attached directory is writable by uid=$(id -u)"
  exit 2
fi

rm /data/.verify_access || true

if [[ $PROXY ]]; then
    export http_proxy="$PROXY"
    export https_proxy="$PROXY"
    export JAVA_TOOL_OPTIONS+="-Djava.net.useSystemProxies=true"
    log "INFO: Giving proxy time to startup..."
    sleep 5
fi

if [[ $RCON_PASSWORD_FILE ]]; then
    log ""
    if [ ! -e ${RCON_PASSWORD_FILE} ]; then
	log "Initial RCON password file ${RCON_PASSWORD_FILE} does not seems to exist."
	log "Please ensure your configuration."
	log "If you are using Docker Secrets feature, please check this for further information: "
	log " https://docs.docker.com/engine/swarm/secrets"
	log ""
	exit 1
    else
	RCON_PASSWORD=$(cat ${RCON_PASSWORD_FILE})
	export RCON_PASSWORD
    fi
    log ""
fi

export SERVER_PROPERTIES=/data/server.properties
export VERSIONS_JSON=https://launchermeta.mojang.com/mc/game/version_manifest.json

case "X$VERSION" in
  X|XLATEST|Xlatest)
    VANILLA_VERSION=$(curl -fsSL $VERSIONS_JSON | jq -r '.latest.release')
  ;;
  XSNAPSHOT|Xsnapshot)
    VANILLA_VERSION=$(curl -fsSL $VERSIONS_JSON | jq -r '.latest.snapshot')
  ;;
  *)
    VANILLA_VERSION=$VERSION
  ;;
esac
export VANILLA_VERSION
log "Resolved version given ${VERSION} into ${VANILLA_VERSION}"

cd /data || exit 1

export ORIGINAL_TYPE=${TYPE^^}

if isTrue "${ENABLE_AUTOPAUSE}"; then
  ${SCRIPTS:-/}start-autopause
fi

log "Resolving type given ${TYPE}"
case "${TYPE^^}" in
  *BUKKIT|SPIGOT)
    exec ${SCRIPTS:-/}start-deployBukkitSpigot "$@"
  ;;

  PAPER)
    exec ${SCRIPTS:-/}start-deployPaper "$@"
  ;;

  PAPERGEYSER)
    exec ${SCRIPTS:-/}start-deployPaper-withGeyser "$@"
  ;;

  TUINITY)
    exec ${SCRIPTS:-/}start-deployTuinity "$@"
  ;;

  FORGE)
    exec ${SCRIPTS:-/}start-deployForge "$@"
  ;;

  FABRIC)
    exec ${SCRIPTS:-/}start-deployFabric "$@"
  ;;

  FTB|CURSEFORGE)
    exec ${SCRIPTS:-/}start-deployCF "$@"
  ;;

  VANILLA)
    exec ${SCRIPTS:-/}start-deployVanilla "$@"
  ;;

  SPONGEVANILLA)
    exec ${SCRIPTS:-/}start-deploySpongeVanilla "$@"
  ;;

  CUSTOM)
    exec ${SCRIPTS:-/}start-deployCustom "$@"
  ;;

  CURSE_INSTANCE)
    exec ${SCRIPTS:-/}start-validateCurseInstance "$@"
  ;;

  MAGMA)
    exec ${SCRIPTS:-/}start-deployMagma "$@"
  ;;

  MOHIST)
    exec ${SCRIPTS:-/}start-deployMohist "$@"
  ;;

  CATSERVER)
    exec ${SCRIPTS:-/}start-deployCatserver "$@"
  ;;

  *)
      log "Invalid type: '$TYPE'"
      log "Must be: VANILLA, FORGE, BUKKIT, SPIGOT, PAPER, FTBA (multiarch-only),"
      log "         CURSE_INSTANCE, CURSEFORGE, SPONGEVANILLA,"
      log "         CUSTOM, MAGMA, MOHIST, CATSERVER"
      exit 1
  ;;

esac
